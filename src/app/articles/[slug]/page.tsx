import { getNoteBySlug, getAllNotes } from "@/lib/notes";
import { notFound } from "next/navigation";
import Link from "next/link";
import { Metadata } from "next";
import ArticleRefreshButton from "@/components/ArticleRefreshButton";

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å—Ç–∞—Ç–µ–π
export const dynamic = 'force-dynamic';
export const revalidate = 0;

interface Props {
  params: { slug: string };
}

export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const note = await getNoteBySlug(params.slug);
  
  if (!note) {
    return {
      title: "–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
    };
  }

  return {
    title: note.title,
    description: note.frontmatter.description || note.content.substring(0, 160),
    keywords: note.frontmatter.tags?.join(", "),
  };
}

// –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
// export async function generateStaticParams() {
//   const notes = await getAllNotes();
//   return notes
//     .filter(note => note.published)
//     .map((note) => ({
//       slug: note.slug,
//     }));
// }

export default async function ArticlePage({ params }: Props) {
  const note = await getNoteBySlug(params.slug);

  if (!note || !note.published) {
    notFound();
  }

  return (
    <div className="min-h-screen bg-ross-gradient section-padding font-inter">
      {/* Header */}
      <header className="header-main max-w-7xl mx-auto mb-8">
        <div className="header-logo">
          <span>üñåÔ∏è</span>
          Pallet Ross
        </div>
        <nav className="header-nav">
          <Link href="/">–ì–ª–∞–≤–Ω–∞—è</Link>
          <Link href="/articles">–°—Ç–∞—Ç—å–∏</Link>
          <a href="#create">Create strategy</a>
          <a href="#pricing">Pricing</a>
          <a href="#contact">Contact</a>
          <a href="#solution">Solution</a>
          <a href="#ecommerce">E-Commerce</a>
        </nav>
      </header>

      <main className="max-w-3xl mx-auto w-full">
        <div className="bento-card mb-8">
          {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –∫–Ω–æ–ø–∫–∏ */}
          <div className="flex flex-wrap items-center gap-4 mb-6">
            <Link href="/articles" className="btn-neumorph inline-flex items-center gap-2">
              ‚Üê –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç—å—è–º
            </Link>
            <div className="ml-auto"><ArticleRefreshButton slug={params.slug} /></div>
          </div>

          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –º–µ—Ç–∞ */}
          <header className="mb-8">
            <h1 className="font-bold text-4xl mb-4" style={{fontFamily:'Inter,sans-serif'}}>{note.title}</h1>
            <div className="flex flex-wrap items-center gap-4 text-secondary text-sm mb-2">
              <span>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {new Date(note.createdAt).toLocaleDateString('ru-RU')}</span>
              <span>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date(note.updatedAt).toLocaleDateString('ru-RU')}</span>
            </div>
            {note.frontmatter.tags && note.frontmatter.tags.length > 0 && (
              <div className="flex flex-wrap gap-2 mt-4">
                {note.frontmatter.tags.map((tag) => (
                  <span key={tag} className="tag-pill">{tag}</span>
                ))}
              </div>
            )}
          </header>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          {note.frontmatter.description && (
            <div className="mb-8 p-4 bg-gray-100 rounded-xl">
              <p className="text-gray-600 italic">{note.frontmatter.description}</p>
            </div>
          )}

          {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
          <article className="markdown-content prose-lg max-w-none">
            <div dangerouslySetInnerHTML={{ __html: note.html || '' }} />
          </article>
        </div>

        {/* Debug info */}
        <div className="mt-8 p-4 bg-yellow-100 rounded-lg text-sm">
          <p><strong>–û—Ç–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç—å–∏:</strong></p>
          <p>Slug: {params.slug}</p>
          <p>–ó–∞–≥–æ–ª–æ–≤–æ–∫: {note.title}</p>
          <p>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date(note.updatedAt).toLocaleString('ru-RU')}</p>
          <p>–î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {note.content?.length} —Å–∏–º–≤–æ–ª–æ–≤</p>
          <p>Frontmatter: {JSON.stringify(note.frontmatter, null, 2)}</p>
          <p className="mt-2">
            <ArticleRefreshButton slug={params.slug} />
          </p>
        </div>
      </main>
    </div>
  );
} 