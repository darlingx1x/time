const { Plugin, Notice, PluginSettingTab, Setting } = require('obsidian');

class NextJsSyncSettingTab extends PluginSettingTab {
	constructor(app, plugin) {
		super(app, plugin);
		this.plugin = plugin;
	}

	display() {
		const { containerEl } = this;

		containerEl.empty();

		containerEl.createEl('h2', { text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Next.js Sync' });

		new Setting(containerEl)
			.setName('–í–∫–ª—é—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é')
			.setDesc('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Å–∞–π—Ç–æ–º')
			.addToggle(toggle => toggle
				.setValue(this.plugin.settings.enabled)
				.onChange(async (value) => {
					this.plugin.settings.enabled = value;
					await this.plugin.saveSettings();
				}));

		new Setting(containerEl)
			.setName('URL —Å–∞–π—Ç–∞')
			.setDesc('–ü–æ–ª–Ω—ã–π URL –≤–∞—à–µ–≥–æ Next.js —Å–∞–π—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://mysite.com)')
			.addText(text => text
				.setPlaceholder('https://mysite.com')
				.setValue(this.plugin.settings.websiteUrl)
				.onChange(async (value) => {
					this.plugin.settings.websiteUrl = value;
					await this.plugin.saveSettings();
				}));

		new Setting(containerEl)
			.setName('API —Ç–æ–∫–µ–Ω')
			.setDesc('–¢–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤')
			.addText(text => text
				.setPlaceholder('your-secret-token')
				.setValue(this.plugin.settings.apiToken)
				.onChange(async (value) => {
					this.plugin.settings.apiToken = value;
					await this.plugin.saveSettings();
				}));

		new Setting(containerEl)
			.setName('–ü–∞–ø–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')
			.setDesc('–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')
			.addText(text => text
				.setPlaceholder('Articles')
				.setValue(this.plugin.settings.folderPath)
				.onChange(async (value) => {
					this.plugin.settings.folderPath = value;
					await this.plugin.saveSettings();
				}));

		containerEl.createEl('h3', { text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' });

		const infoEl = containerEl.createEl('div', { cls: 'setting-item-description' });
		infoEl.innerHTML = `
			<p><strong>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</strong></p>
			<ol>
				<li>–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å—Ç–∞—Ç–µ–π –≤ –≤–∞—à–µ–º vault</li>
				<li>–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —ç—Ç–æ–π –ø–∞–ø–∫–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö</li>
				<li>–î–æ–±–∞–≤—å—Ç–µ URL –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ –∏ API —Ç–æ–∫–µ–Ω</li>
				<li>–í–∫–ª—é—á–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é</li>
				<li>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–º–µ—Ç–∫–∏ —Å frontmatter –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö</li>
			</ol>
			
			<p><strong>–ü—Ä–∏–º–µ—Ä frontmatter:</strong></p>
			<pre>---
title: –ú–æ—è —Å—Ç–∞—Ç—å—è
slug: my-article
tags: [–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, nextjs]
description: –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
published: true
---</pre>
		`;
	}
}

class NextJsSyncPlugin extends Plugin {
	async onload() {
		new Notice('Next.js Sync –ø–ª–∞–≥–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
		console.log('Next.js Sync –ø–ª–∞–≥–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
		this.settings = {
			enabled: false,
			websiteUrl: '',
			apiToken: '',
			folderPath: '',
			syncOnSave: true,
			syncOnClose: false,
			syncInterval: 5,
			autoPull: false,
		};

		await this.loadSettings();
		
		// –ö–æ–º–∞–Ω–¥—ã
		this.addCommands();

		// –°–æ–±—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤
		this.registerEvent(
			this.app.vault.on('create', (file) => {
				if (this.shouldSyncFile(file)) {
					this.syncFile(file);
				}
			})
		);

		this.registerEvent(
			this.app.vault.on('modify', (file) => {
				if (this.shouldSyncFile(file)) {
					this.syncFile(file);
				}
			})
		);

		this.registerEvent(
			this.app.vault.on('delete', (file) => {
				if (this.shouldSyncFile(file)) {
					this.deleteFile(file);
				}
			})
		);

		// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
		this.addSettingTab(new NextJsSyncSettingTab(this.app, this));

		console.log('–ü–ª–∞–≥–∏–Ω Next.js Sync –∑–∞–≥—Ä—É–∂–µ–Ω');
	}

	onunload() {
		console.log('–ü–ª–∞–≥–∏–Ω Next.js Sync –≤—ã–≥—Ä—É–∂–µ–Ω');
	}

	async loadSettings() {
		this.settings = Object.assign({}, this.settings, await this.loadData());
	}

	async saveSettings() {
		await this.saveData(this.settings);
	}

	addCommands() {
		this.addCommand({
			id: 'sync-current-file',
			name: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª',
			editorCallback: (editor, view) => {
				const file = view.file;
				if (file && this.shouldSyncFile(file)) {
					this.syncFile(file);
				}
			}
		});

		this.addCommand({
			id: 'sync-all-files',
			name: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã',
			callback: () => {
				this.syncAllFiles();
			}
		});

		this.addCommand({
			id: 'show-sync-status',
			name: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
			callback: () => {
				this.showStatus();
			}
		});
	}

	shouldSyncFile(file) {
		if (!this.settings.enabled || !this.settings.folderPath) {
			return false;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª, –∞ –Ω–µ –ø–∞–ø–∫–∞
		if (file.children) {
			return false;
		}

		return file.path.startsWith(this.settings.folderPath);
	}

	async syncFile(file) {
		if (!this.settings.enabled || !this.settings.websiteUrl || !this.settings.apiToken) {
			return;
		}

		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª, –∞ –Ω–µ –ø–∞–ø–∫–∞
		if (file.children) {
			console.log(`–ü—Ä–æ–ø—É—Å–∫–∞—é –ø–∞–ø–∫—É: ${file.path}`);
			return;
		}

		try {
			const fullContent = await this.app.vault.read(file);
			const frontmatter = this.parseFrontmatter(fullContent);
			const content = this.extractContent(fullContent); // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–µ–∑ frontmatter
			const slug = this.extractSlug(file, frontmatter);
			const title = frontmatter.title || file.basename;

			const noteData = {
				slug,
				title,
				content,
				frontmatter,
				updatedAt: new Date().toISOString()
			};

			const response = await fetch(`${this.settings.websiteUrl}/api/upload-note`, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'Authorization': `Bearer ${this.settings.apiToken}`
				},
				body: JSON.stringify(noteData)
			});

			if (response.ok) {
				console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: ${title}`);
				new Notice(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: ${title}`);
			} else {
				const error = await response.text();
				console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error}`);
				new Notice(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error}`);
			}
		} catch (error) {
			console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error}`);
			new Notice(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error}`);
		}
	}

	async deleteFile(file) {
		if (!this.settings.enabled || !this.settings.websiteUrl || !this.settings.apiToken) {
			return;
		}

		try {
			const slug = this.extractSlug(file, {});
			
			const response = await fetch(`${this.settings.websiteUrl}/api/delete-note?slug=${slug}`, {
				method: 'DELETE',
				headers: {
					'Authorization': `Bearer ${this.settings.apiToken}`
				}
			});

			if (response.ok) {
				console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: ${file.basename}`);
				new Notice(`–£–¥–∞–ª–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: ${file.basename}`);
			} else {
				const error = await response.text();
				console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error}`);
				new Notice(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error}`);
			}
		} catch (error) {
			console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error}`);
			new Notice(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error}`);
		}
	}

	async syncAllFiles() {
		if (!this.settings.enabled || !this.settings.folderPath) {
			new Notice('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –ø–∞–ø–∫–∞');
			return;
		}

		const files = this.app.vault.getMarkdownFiles().filter(file => 
			file.path.startsWith(this.settings.folderPath) && !file.children
		);

		console.log(`üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é ${files.length} —Ñ–∞–π–ª–æ–≤...`);
		new Notice(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${files.length} —Ñ–∞–π–ª–æ–≤...`);

		let successCount = 0;
		let errorCount = 0;

		for (const file of files) {
			try {
				await this.syncFile(file);
				successCount++;
			} catch (error) {
				errorCount++;
				console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${file.basename}: ${error}`);
			}
		}

		console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);
		new Notice(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);
	}

	showStatus() {
		const status = this.settings.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞';
		const folder = this.settings.folderPath || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
		const url = this.settings.websiteUrl || '–ù–µ —É–∫–∞–∑–∞–Ω';
		
		new Notice(`–°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n${status}\n–ü–∞–ø–∫–∞: ${folder}\nURL: ${url}`);
	}

	parseFrontmatter(content) {
		const frontmatterRegex = /^---\n([\s\S]*?)\n---/;
		const match = content.match(frontmatterRegex);
		
		if (!match) {
			return {};
		}

		const frontmatterText = match[1];
		const frontmatter = {};

		const lines = frontmatterText.split('\n');
		for (const line of lines) {
			const colonIndex = line.indexOf(':');
			if (colonIndex > 0) {
				const key = line.substring(0, colonIndex).trim();
				let value = line.substring(colonIndex + 1).trim();
				
				// –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
				if ((value.startsWith('"') && value.endsWith('"')) || 
					(value.startsWith("'") && value.endsWith("'"))) {
					value = value.slice(1, -1);
				}
				
				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã
				if (value.startsWith('[') && value.endsWith(']')) {
					value = value.slice(1, -1).split(',').map(item => item.trim());
				}
				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º boolean –∑–Ω–∞—á–µ–Ω–∏—è
				else if (value === 'true') {
					value = true;
				}
				else if (value === 'false') {
					value = false;
				}
				
				frontmatter[key] = value;
			}
		}

		return frontmatter;
	}

	extractContent(fullContent) {
		const frontmatterRegex = /^---\n([\s\S]*?)\n---/;
		const match = fullContent.match(frontmatterRegex);
		if (match) {
			return fullContent.substring(match[0].length).trim();
		}
		return fullContent.trim();
	}

	extractSlug(file, frontmatter) {
		if (frontmatter.slug) {
			return frontmatter.slug;
		}

		return file.basename
			.toLowerCase()
			.replace(/[^a-z0-9–∞-—è—ë\s-]/g, '')
			.replace(/\s+/g, '-')
			.replace(/-+/g, '-')
			.replace(/^-|-$/g, '');
	}
}

module.exports = NextJsSyncPlugin; 